name: üöÄ Secure Angular Deploy with Firebase
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: üîê Inject Firebase Secrets
        run: |
          # Create production environment file
          mkdir -p src/environments
          cat > src/environments/environment.prod.ts <<EOF
          export const environment = {
            production: true,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}'
            }
          };
          EOF
          
          # Verify file was created (without exposing secrets)
          grep "production:" src/environments/environment.prod.ts

      - name: üìå Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Angular App
        run: npm run build -- --configuration production
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: üêõ Verify Build Output
        run: |
          echo "Build directory contents:"
          ls -la dist/tcng/browser
          echo "Checking for Firebase config in main.js:"
          grep -o "apiKey" dist/tcng/browser/main.js || echo "No API key found in build"

      - name: üßπ Secure Clean & Deploy via WebDAV
        env:
          WEBDISK_USERNAME: ${{ secrets.WEBDISK_USERNAME }}
          WEBDISK_PASSWORD: ${{ secrets.WEBDISK_PASSWORD }}
        run: |
          # ===== CONFIGURATION =====
          BUILD_DIR="dist/tcng/browser"
          WEBDISK_URL="https://stage.marketing.host2africa.com:2078"
          
          # Protected items (won't be touched)
          PROTECTED_ITEMS=(
         
          )
          # =========================

          # üîê Verify WebDAV connection
          echo "üîê Testing WebDAV connection..."
          if ! curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --fail --silent --show-error >/dev/null; then
            echo "‚ùå FATAL: WebDAV authentication failed!"
            exit 1
          fi

          # üóëÔ∏è Get remote items using xmlstarlet
          echo "üì° Fetching remote file list..."
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          REMOTE_ITEMS=$(curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --silent | \
            xmlstarlet sel -t -v "//a:href" -n | \
            sed "s|$WEBDISK_URL||" | sed 's|^/||' | grep -v '^$' | sort -ur)

          # üí£ Delete non-protected items
          echo "üßπ Starting cleanup..."
          for item in $REMOTE_ITEMS; do
            [[ -z "$item" ]] && continue
            
            protected=false
            for protected_item in "${PROTECTED_ITEMS[@]}"; do
              [[ "$item" == "$protected_item"* ]] && protected=true && break
            done

            if ! $protected; then
              echo "üóëÔ∏è Deleting: $item"
              curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X DELETE "$WEBDISK_URL/$item" --silent --show-error --fail || \
              curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X DELETE "$WEBDISK_URL/$item/" --silent --show-error --fail || true
            else
              echo "üõ°Ô∏è Preserving: $item"
            fi
          done

          # üöÄ Deploy new build
          echo "üöÄ Uploading build..."
          find $BUILD_DIR -type f | while read -r file; do
            remote_path="${file#$BUILD_DIR/}"
            remote_dir=$(dirname "$remote_path")
            
            [[ "$remote_dir" != "." ]] && \
              curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X MKCOL "$WEBDISK_URL/$remote_dir" --silent --show-error --fail >/dev/null 2>&1 || true
            
            for attempt in {1..3}; do
              if curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -T "$file" "$WEBDISK_URL/$remote_path" --silent --show-error --fail; then
                echo "‚úÖ Uploaded: $remote_path"
                break
              elif [[ $attempt -eq 3 ]]; then
                echo "‚ùå Failed to upload: $remote_path"
                exit 1
              else
                sleep $((attempt * 2))
              fi
            done
          done

          echo "üéâ Deployment completed successfully!"
          echo "üåê Live at: https://stage.marketing.host2africa.com"
